#!/usr/bin/env bash
VERSION="0.2.10"

set -o history
HISTFILE=~/.myrepl_history
HISTCONTROL=ignorespace

print_version()
{
  echo "terraform-repl version $VERSION"
}

print_options()
{
  echo "terraform-repl [version $VERSION]"
  echo "Usage: "
  echo "  -h, --help                   : Display this message"
  echo "  -v, --version                : Display the version of terraform-repl"
  echo "  -transcript                  : Generate a transcript file"
  echo "  -no-tab-completion           : Disable tab completion"
  echo "  -docker-container-backend    : Use a terraform console docker container as the backend for terraform console commands"
}

TERRAFORM_FUNCTIONS=(
  # numeric functions
  "abs"
  "ceil"
  "floor"
  "log"
  "max"
  "min"
  "parseint"
  "pow"
  "signum"
  # string functions
  "chomp"
  "endswith"
  "format"
  "formatlist"
  "indent"
  "join"
  "lower"
  "regex"
  "regexall"
  "replace"
  "split"
  "startswith"
  "strrev"
  "substr"
  "title"
  "trim"
  "trimprefix"
  "trimsuffix"
  "trimspace"
  "upper"
  # collection functions
  "alltrue"
  "anytrue"
  "chunklist"
  "coalesce"
  "coalescelist"
  "compact"
  "concat"
  "contains"
  "distinct"
  "element"
  "flatten"
  "index"
  "keys"
  "length"
  "list"
  "lookup"
  "map"
  "matchkeys"
  "merge"
  "one"
  "range"
  "reverse"
  "setintersection"
  "setproduct"
  "setsubtract"
  "setunion"
  "slice"
  "sort"
  "sum"
  "transpose"
  "values"
  "zipmap"
  # encoding functions
  "base64decode"
  "base64encode"
  "base64gzip"
  "csvdecode"
  "jsondecode"
  "jsonencode"
  "textdecodebase64"
  "textencodebase64"
  "urlencode"
  "yamldecode"
  "yamlencode"
  # filesystem functions
  "abspath"
  "dirname"
  "pathexpand"
  "basename"
  "file"
  "fileexists"
  "fileset"
  "filebase64"
  "templatefile"
  # date and time functions
  "formatdate"
  "timeadd"
  "timecmp"
  "timestamp"
  # hash and crypto functions
  "base64sha256"
  "base64sha512"
  "bcrypt"
  "filebase64sha256"
  "filebase64sha512"
  "filemd5"
  "filesha1"
  "filesha256"
  "filesha512"
  "md5"
  "rsadecrypt"
  "sha1"
  "sha256"
  "sha512"
  "uuid"
  "uuidv5"
  # ip network functions
  cidrhost
  cidrnetmask
  cidrsubnet
  cidrsubnets
  # type conversion functions
  can
  nonsensitive
  sensitive
  tobool
  tolist
  tomap
  tonumber
  toset
  tostring
  try
  type
)


# by default, use the docker container backend
use_docker_container_backend=false
use_tab_completion=true
generate_transcript=false
timestamp=$(date +%Y%m%dT%H%M%SZ)
container_name="terraformreplcontainer${timestamp}"
transcript_name="terraform-repl-transcript-${timestamp}"

# parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help) print_options; exit 0 ;;
        -v|--version) print_version; exit 0 ;;
        -transcript) generate_transcript=true ;;
        -no-tab-completion) use_tab_completion=false ;;
        -docker-container-backend) use_docker_container_backend=true ;;
        *) echo "Unknown parameter passed: $1" && exit 1;;
    esac
    shift
done

_validate_docker_install () {
  # make sure docker is installed
  which docker &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "docker is not installed"
    exit 1
  fi

  # make sure socat is installed
  which socat &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "socat is not installed"
    exit 1
  fi
}

_validate_prerequisites () {
  # make sure terraform is installed
  which terraform &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "terraform is not installed"
    exit 1
  fi

  # make sure jq is installed
  which jq &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "jq is not installed"
    exit 1
  fi

  # make sure hcl2json is installed
  which hcl2json &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "hcl2json is not installed"
    exit 1
  fi
}

_check_running_terraform_console_process () {
  # if .terraform.tfstate.lock.info already exists, terraform console is already running
  if [ -f ".terraform.tfstate.lock.info" ]; then
    echo "A terraform console process is already running here"
    exit 1
  fi
}

_check_running_terraform_repl_container_in_dir () {
  # check whether the current directory is already mounted in another container, as this will prevent terraform from working properly due to the state lock
  working_directory="$(pwd)"
  running_containers="$(docker ps -q --filter "name=terraformrepl")"
  if [[ -n "$running_containers" ]] ; then
    running_container_with_cwd_mounted=$(echo "$running_containers" | xargs -I {} docker inspect -f '{{ .Mounts }} {{.Name}}' {} | grep "  $working_directory /data" )
    if [[ -n "$running_container_with_cwd_mounted" ]] ; then
      running_container_name=$(echo "$running_container_with_cwd_mounted" | awk -F/ '{print $NF}')
      echo "The working directory is already mounted in docker container $running_container_name"
      exit 1
    fi
  fi
}

_enable_tab_completion() {
  set -o emacs
  bind -x '"\t":"_tab"';
}

_tab()
{
  # do nothing if input is empty
  if [ -z "$READLINE_LINE" ]; then
    return
  fi

  # check whether the input starts with local
  if grep -qE "^local\..*$" <<< "$READLINE_LINE"; then
    # get all local variables
    locals_variables=$(_get_obj ".locals")
    locals_paths=$(_get_paths "$locals_variables")

    # escape square brackets in readline for grep
    string_to_match=$(sed 's/\[/\\[/g' <<< "$READLINE_LINE")

    # find possible matches in paths given input
    possible_matches=($(printf "%s\n" "${locals_paths}" | grep "^${string_to_match}"))

    # if no matches are found, return
    if [ ${#possible_matches[@]} -eq 0 ]; then
      return

    # if a single match is found, use that to replace input string
    elif [ ${#possible_matches[@]} -eq 1 ]; then
      READLINE_LINE="${possible_matches[0]}"
    # otherwise, print all matches
    else
      # replace input string with longest common substring
      READLINE_LINE=$(printf "%s\n" "${possible_matches[@]}" | sed -e '$q;N;s/^\(.*\).*\n\1.*$/\1/;h;G;D')
      printf "%s  " "${possible_matches[@]}"
      printf "\n\n"
    fi
  else
    # find possible matches in terraform functions list
    possible_matches=($(printf "%s\n" "${TERRAFORM_FUNCTIONS[@]}" | grep "^${READLINE_LINE}"))

    # if no matches are found, return
    if [ ${#possible_matches[@]} -eq 0 ]; then
      return

    # if a single match is found, use that to replace input string
    elif [ ${#possible_matches[@]} -eq 1 ]; then
      READLINE_LINE="${possible_matches[0]}("
    # otherwise, print all matches
    else
      printf "%s  " "${possible_matches[@]}"
      printf "\n"
    fi
  fi

  # adjust cursor to length of new string
  READLINE_POINT="${#READLINE_LINE}"
}

_wait_tf_container () {
  # wait for the docker container to be operational
  while : ; do

      _check_container_running_status

      cmd="local"
      cmd_output=$(_run_tf_console_command_in_container "$cmd")
      cmd_output_exit_code=$?

      # exit immediately if socat failed, as this means the docker container could not start
      if [[ "$cmd_output_exit_code" -ne 0 ]]; then
        printf "Something went wrong: the docker container backend could not start:\n\n"
        docker logs "$container_name" --since "1s" | sed 1d
        exit 1
      fi

      cmd_output_match=$(echo "$cmd_output" | grep -o "$cmd")

      if [[ -n "$cmd_output_match" ]] && [[ "$cmd" != "$cmd_output_match" ]]; then
        break
      fi
  done
}

_run_tf_container () {
  # start docker container running terraform console in the background
  echo "Starting terraform console docker container..."

  run_docker_command_output=$(docker run -itd -v "$(pwd)":/data --name "$container_name" -w /data --entrypoint=sh hashicorp/terraform -c "terraform console" 1>/dev/null)
  run_docker_command_exit_code=$?
  if [[ "$run_docker_command_exit_code" -ne 0 ]]; then
    echo "$run_docker_command_output"
    exit 1
  fi

  # wait for the docker container to be operational
  _wait_tf_container
}

_start_tf_container () {
  # start docker container
  docker start "$container_name" &> /dev/null
}

_stop_tf_container () {
  # stop docker container
  docker stop "$container_name" &> /dev/null
}

_remove_tf_container () {
  # remove docker container
  docker rm "$container_name" &> /dev/null
}

_check_container_running_status () {
  # if the docker is not running, then something went wrong
  if [ ! "$( docker ps | grep "$container_name" )" ]; then
    echo "Something went wrong: the docker container backend is no longer running"
    exit 1
  fi
}

_run_tf_console_command_in_container() {
  # execute the specified command in terraform console in the docker container
  echo "$1" | socat EXEC:"docker attach ${container_name}",pty STDIN &> /dev/null
  socat_exit_code=$?
  docker logs "$container_name" --since "1s" | sed 1d
  return "$socat_exit_code"
}

_run_tf_console_command() {
  # execute the specified command in terraform console
  echo "$1" | terraform console 2>&1
}

_get_paths () {
  # get all valid paths
  echo "$1" | jq -r '
paths(scalars) as $p
  | [ ( [ $p[] | tostring ] | join(".") )
    , ( getpath($p) | tojson )
    ]
  | join(": ")
' | sed -E "s/\.([0-9]+)/\[\1\]/g" | awk '{t=$1; gsub(/^[0-9]+./,"local.",t); gsub(/[.:]*$/,"",t); print t}'
}

_get_obj () {
  # make sure terraform source files exist
  if ! compgen -G "./*.tf" > /dev/null; then
    echo "No terraform source files were found"
    return
  fi

  # extract object from terraform source code using hcl2json and jq
  tfsrc=()
  for file in *.tf ; do
    value=$(<"$file")
    value="${value}"$'\n'
    tfsrc+=("$value")
  done

  echo -e "${tfsrc[@]}" | hcl2json | jq -M -e "$1 //empty" 2> /dev/null
}

_tf_console_command () {
  # execute the specified command in terraform console
  if [ "${use_docker_container_backend}" = true ]; then
    _check_container_running_status
    command_output=$(_run_tf_console_command_in_container "$1" | tee /dev/tty)
  else
    command_output=$(_run_tf_console_command "$1" | tee /dev/tty)
  fi
  # write command output to transcript file if transcript was enabled
  _write_to_transcript_if_enabled "$command_output"
}

_validate_variable_assignment () {
  # validate that the variable value is valid HCL
  echo "$1" | hcl2json &> /dev/null
  if [[ "$?" -ne 0 ]]; then
    echo "The variable value is not valid HCL"
    return 1
  fi
}

_add_resource () {
  # add the new resource to a tmp .tf file
  echo "$1" >> "terraform_repl_tmp.tf"

  if [[ "$? " -ne 0 ]]; then
    echo "Could not create temporary file in the current directory."
    echo "Do you have write privileges?"
  fi
}

# cleanup function to be run on exit
_cleanup() {
  if [ "${use_docker_container_backend}" = true ]; then
    echo "Shutting down terraform console docker container..."
    _stop_tf_container
    _remove_tf_container
  fi
  # clear additional resource file if it exists
  if [ -f "terraform_repl_tmp.tf" ]; then
    rm terraform_repl_tmp.tf
  fi
  # clear lock
  if [ -f ".terraform.tfstate.lock.info" ]; then
    rm ".terraform.tfstate.lock.info"
  fi
  # tell user where to find transcript file if it exists, meaning at least one command was run
  if [ "${generate_transcript}" = true ] && [ -f "/tmp/$transcript_name" ]; then
    echo "Transcript file /tmp/$transcript_name was generated"
  fi
}

# generate a transcript file which contains REPL inputs and outputs
_write_to_transcript_if_enabled() {
  if [ "${generate_transcript}" = true ]; then
    printf "%s \n" "$@" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' >> "/tmp/$transcript_name"
  fi
}

_validate_prerequisites

if [ "${use_tab_completion}" = true ]; then
  _enable_tab_completion
fi

if [ "${use_docker_container_backend}" = true ]; then
  # if the -docker-container-backend flag has been specified, start the backend container
  _validate_docker_install
  _check_running_terraform_repl_container_in_dir
  _check_running_terraform_console_process
  _run_tf_container
else
  _check_running_terraform_console_process
fi

trap _cleanup EXIT

main() {
  while true; do
    # read input and write to history
    read -ep "> " input

    # if input is empty, continue
    if grep -qE "^$" <<< "$input"; then
      continue
    fi

    # only write non empty input to history
    history -s "$input"

    # check if the input is a locals assignment
    if grep -qE "^(local\.[^.]+\=.+)" <<< "$input"; then
      # write input to transcript if enabled
      _write_to_transcript_if_enabled "> $input"

      # parse the input
      split_input=(${input//=/ })
      split_local=(${split_input//./ })

      read -r -d '' localVar << EOM
      locals {${split_local[1]} = ${split_input[@]:1}}
EOM
      # check whether the assignment is valid hcl language
      assignment=$(_validate_variable_assignment "$localVar")
      assignment_exit_code=$?

      if [[ "$assignment_exit_code" -eq 0 ]]; then
        # add the new local to a tmp file and restart the container if needed
        _add_resource "$localVar"

        if [ "${use_docker_container_backend}" = true ]; then
          # stop the container to release the lock
          _stop_tf_container
        fi

        # run the command in a standalone terraform console in case it is an incorrect command
        terraform_console_command=$(_run_tf_console_command)
        terraform_console_command_exit_code=$?

        if [ "$terraform_console_command_exit_code" -ne 0 ]; then
          # remove the resource from the temporary file
          head -n -1 terraform_repl_tmp.tf > terraform_repl_tmp_2.tf
          mv terraform_repl_tmp_2.tf terraform_repl_tmp.tf
        fi

        if [ "${use_docker_container_backend}" = true ]; then
          # restart the container
          _start_tf_container
          _wait_tf_container
        fi

      else
        echo "$assignment"
      fi
      continue
    fi

    # if the input is exacly local, use hcl2json and jq to get object
    if grep -qE "^local$" <<< "$input"; then
      command_output=$(_get_obj ".locals" | tee /dev/tty)
      if [[ "$?" -ne 0 ]]; then
        echo "The provided input did not match any locals object"
      fi
      # write input and output to transcript if enabled
      _write_to_transcript_if_enabled "> $input" "$command_output"
      continue
    fi

    # if the input is resource followed by an optional key, use hcl2json and jq to get object
    if grep -qE "^resource(\.[^.]+)?$" <<< "$input"; then
      command_output=$(_get_obj ".$input" | tee /dev/tty)
      if [[ "$?" -ne 0 ]]; then
        echo "The provided input did not match any resource object"
      fi
      # write input and output to transcript if enabled
      _write_to_transcript_if_enabled "> $input" "$command_output"
      continue
    fi

    # if the input is data followed by an optional key, use hcl2json and jq to get object
    if grep -qE "^data(\.[^.]+)?$" <<< "$input"; then
      command_output=$(_get_obj ".$input" | tee /dev/tty)
      if [[ "$?" -ne 0 ]]; then
        echo "The provided input did not match any data object"
      fi
      # write input and output to transcript if enabled
      _write_to_transcript_if_enabled "> $input" "$command_output"
      continue
    fi

    # if the input is output followed by an optional key, use hcl2json and jq to get object
    if grep -qE "^output(\.[^.]+)?$" <<< "$input"; then
      command_output=$(_get_obj ".$input" | tee /dev/tty)
      if [[ "$?" -ne 0 ]]; then
        echo "The provided input did not match any output object"
      fi
      # write input and output to transcript if enabled
      _write_to_transcript_if_enabled "> $input" "$command_output"
      continue
    fi

    # if the input is ! followed by a string, evaluate the string
    if grep -qE "^!.+" <<< "$input"; then
      eval "${input:1}"
      continue
    fi

    # if the input is either exit, clear or history, evaluate it
    case "$input" in
        exit | clear | history)
          eval "$input"
        ;;
        *)
        # write input to transcript if enabled
        _write_to_transcript_if_enabled "> $input"
        # otherwise, feed command to terraform console
        _tf_console_command "$input"
    esac

  done
}

# Clear command history and start program
cat /dev/null > ~/.myrepl_history && history -c
main


